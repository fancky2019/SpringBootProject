<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.demo.DemoProductMapper">



    <!--开启本mapper的namespace下的二级缓存.或者在mybatis全局配置文件（mybatis-config）开启二级缓存-->
  <!--
      eviction:代表的是缓存回收策略，目前MyBatis提供以下策略。
      (1) LRU,最近最少使用的，一处最长时间不用的对象.默认的清除策略是 LRU。
      (2) FIFO,先进先出，按对象进入缓存的顺序来移除他们
      (3) SOFT,软引用，移除基于垃圾回收器状态和软引用规则的对象
      (4) WEAK,弱引用，更积极的移除基于垃圾收集器状态和弱引用规则的对象。这里采用的是LRU，
              移除最长时间不用的对形象

      flushInterval:刷新间隔时间，单位为毫秒，这里配置的是100秒刷新，如果你不配置它，那么当
      SQL被执行的时候才会去刷新缓存。

      size:引用数目，一个正整数，代表缓存最多可以存储多少个对象，不宜设置过大。设置过大会导致内存溢出。
      这里配置的是1024个对象

      readOnly:只读，意味着缓存数据只能读取而不能修改，这样设置的好处是我们可以快速读取缓存，缺点是我们没有
      办法修改缓存，他的默认值是false，不允许我们修改

useCache="true"
        <select id="selectAllStudents" resultMap="studentMap" useCache="true">
        SELECT id, name, age FROM student
    </select>


<select ... flushCache="false" useCache="true"/>
<insert ... flushCache="true"/>
<update ... flushCache="true"/>
<delete ... flushCache="true"/>

  -->
  <cache eviction="LRU" flushInterval="100000" readOnly="true" size="1024"/>

<!--  默认情况下，只启用了本地的会话缓存，它仅仅对一个会话中的数据进行缓存。 要启用全局的二级缓存，只需要在你的 SQL 映射文件中添加一行：-->
<!--  <cache/>-->
<!--  映射语句文件中的所有 select 语句的结果将会被缓存。-->
<!--映射语句文件中的所有 insert、update 和 delete 语句会刷新缓存。-->
<!--缓存会使用最近最少使用算法（LRU, Least Recently Used）算法来清除不需要的缓存。-->
<!--缓存不会定时进行刷新（也就是说，没有刷新间隔）。-->
<!--缓存会保存列表或对象（无论查询方法返回哪种）的 1024 个引用。-->
<!--缓存会被视为读/写缓存，这意味着获取到的对象并不是共享的，可以安全地被调用者修改，而不干扰其他调用者或线程所做的潜在修改。-->

  <resultMap id="BaseResultMap" type="com.example.demo.model.entity.demo.DemoProduct">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="guid" jdbcType="VARCHAR" property="guid" />
    <result column="product_name" jdbcType="VARCHAR" property="productName" />
    <result column="product_style" jdbcType="VARCHAR" property="productStyle" />
    <result column="image_path" jdbcType="VARCHAR" property="imagePath" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="modify_time" jdbcType="TIMESTAMP" property="modifyTime" />
    <result column="status" jdbcType="TINYINT" property="status" />
    <result column="description" jdbcType="VARCHAR" property="description" />
    <result column="timestamp" jdbcType="TIMESTAMP" property="timestamp" />
  </resultMap>
  <sql id="Base_Column_List">
    id, guid, product_name, product_style, image_path, create_time, modify_time, `status`,
    description, `timestamp`
  </sql>
<!--  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">-->
<!--    select -->
<!--    <include refid="Base_Column_List" />-->
<!--    from demo_product-->
<!--    where id = #{id,jdbcType=INTEGER}-->
<!--  </select>-->

  <!--    useCache="true" 使用二级缓存-->
  <!--分页查询-->
  <select id="getPageData" useCache="true" parameterType="com.example.demo.model.request.DemoProductRequest"
          resultType="com.example.demo.model.entity.demo.DemoProduct">
    select * from demo_product
    where 1=1
    <if test="productName != null and productName != ''">
      and product_name LIKE CONCAT('%',#{productName,jdbcType=VARCHAR},'%')
    </if>
    limit #{pageSize,jdbcType=INTEGER}*(#{pageIndex,jdbcType=INTEGER}-1) ,#{pageSize,jdbcType=INTEGER}
  </select>

  <select id="query" useCache="true" parameterType="com.example.demo.model.request.DemoProductRequest"
          resultType="com.example.demo.model.entity.demo.DemoProduct">
    select * from demo_product
    where 1=1
    <if test="productName != null and productName != ''">
      and product_name LIKE CONCAT('%',#{productName,jdbcType=VARCHAR},'%')
    </if>
  union
    select * from demo_product
  </select>

  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultType="com.example.demo.model.entity.demo.DemoProduct">
    select
    <include refid="Base_Column_List" />
    from demo_product
    where id = #{id,jdbcType=INTEGER}
  </select>

  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from demo_product
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.example.demo.model.entity.demo.DemoProduct" useGeneratedKeys="true">
    insert into demo_product (guid, product_name, product_style,
      image_path, create_time, modify_time,
      `status`, description, `timestamp`
      )
    values (#{guid,jdbcType=VARCHAR}, #{productName,jdbcType=VARCHAR}, #{productStyle,jdbcType=VARCHAR},
      #{imagePath,jdbcType=VARCHAR}, #{createTime,jdbcType=TIMESTAMP}, #{modifyTime,jdbcType=TIMESTAMP},
      #{status,jdbcType=TINYINT}, #{description,jdbcType=VARCHAR}, #{timestamp,jdbcType=TIMESTAMP}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.example.demo.model.entity.demo.DemoProduct" useGeneratedKeys="true">
    insert into demo_product
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="guid != null">
        guid,
      </if>
      <if test="productName != null">
        product_name,
      </if>
      <if test="productStyle != null">
        product_style,
      </if>
      <if test="imagePath != null">
        image_path,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="modifyTime != null">
        modify_time,
      </if>
      <if test="status != null">
        `status`,
      </if>
      <if test="description != null">
        description,
      </if>
      <if test="timestamp != null">
        `timestamp`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="guid != null">
        #{guid,jdbcType=VARCHAR},
      </if>
      <if test="productName != null">
        #{productName,jdbcType=VARCHAR},
      </if>
      <if test="productStyle != null">
        #{productStyle,jdbcType=VARCHAR},
      </if>
      <if test="imagePath != null">
        #{imagePath,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTime != null">
        #{modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        #{status,jdbcType=TINYINT},
      </if>
      <if test="description != null">
        #{description,jdbcType=VARCHAR},
      </if>
      <if test="timestamp != null">
        #{timestamp,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>

  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.model.entity.demo.DemoProduct">
    update demo_product
    <set>
      <if test="guid != null">
        guid = #{guid,jdbcType=VARCHAR},
      </if>
      <if test="productName != null">
        product_name = #{productName,jdbcType=VARCHAR},
      </if>
      <if test="productStyle != null">
        product_style = #{productStyle,jdbcType=VARCHAR},
      </if>
      <if test="imagePath != null">
        image_path = #{imagePath,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="modifyTime != null">
        modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        `status` = #{status,jdbcType=TINYINT},
      </if>
      <if test="description != null">
        description = #{description,jdbcType=VARCHAR},
      </if>
      <if test="timestamp != null">
        `timestamp` = #{timestamp,jdbcType=TIMESTAMP},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>

  <update id="updateByPrimaryKey" parameterType="com.example.demo.model.entity.demo.DemoProduct">
    update demo_product
    set guid = #{guid,jdbcType=VARCHAR},
      product_name = #{productName,jdbcType=VARCHAR},
      product_style = #{productStyle,jdbcType=VARCHAR},
      image_path = #{imagePath,jdbcType=VARCHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      modify_time = #{modifyTime,jdbcType=TIMESTAMP},
      `status` = #{status,jdbcType=TINYINT},
      description = #{description,jdbcType=VARCHAR},
      `timestamp` = #{timestamp,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=INTEGER}
  </update>


  <!-- mysql默认接受sql的大小是1048576(1M)，即第三种方式若数据量超过1M会报如下异常：（可通过调整MySQL安装目录下的my.ini文件中[mysqld]段的＂max_allowed_packet = 1M＂）-->
<!--  <insert id="batchInsert" parameterType="com.example.demo.model.entity.demo.DemoProduct">-->
  <insert id="batchInsert" parameterType="java.util.List">
      insert into demo_product (guid, product_name, product_style,
      image_path, create_time, modify_time,
      `status`, description, `timestamp`
      )
        values
        <foreach collection="list" item="item" separator=",">
      (#{item.guid,jdbcType=VARCHAR}, #{item.productName,jdbcType=VARCHAR}, #{item.productStyle,jdbcType=VARCHAR},
      #{item.imagePath,jdbcType=VARCHAR}, #{item.createTime,jdbcType=TIMESTAMP}, #{item.modifyTime,jdbcType=TIMESTAMP},
      #{item.status,jdbcType=TINYINT}, #{item.description,jdbcType=VARCHAR}, #{item.timestamp,jdbcType=TIMESTAMP}
       )
        </foreach>
    </insert>


  <update id="batchUpdate" parameterType="java.util.List">
    <foreach collection="list" item="item" index="index" open="" close="" separator=";">
      update demo_product
      <set>
        <if test="item.productName != null and item.productName != ''">
          product_name = #{item.productName,jdbcType=VARCHAR},
        </if>
        <if test="item.productStyle != null and item.productStyle != ''">
          product_style = #{item.productStyle,jdbcType=VARCHAR},
        </if>
      </set>
      where id = #{item.id,jdbcType=INTEGER}
    </foreach>
  </update>

  <update id="batchUpdateProductTest" parameterType="java.util.List">
    <foreach collection="list" item="item" index="index" open="" close="" separator=";">
      update demo_product
      <set>
        <if test="item.productName != null and item.productName != ''">
          product_name = #{item.productName,jdbcType=VARCHAR},
        </if>
        <if test="item.productStyle != null and item.productStyle != ''">
          product_style = #{item.productStyle,jdbcType=VARCHAR},
        </if>
      </set>
      where 1=1
      and id = #{item.id,jdbcType=INTEGER}
      <if test="item.productName != null and item.productName != ''">
        and product_name LIKE CONCAT('%',#{item.productName,jdbcType=VARCHAR},'%')
      </if>
    </foreach>
  </update>

  <delete id="batchDelete">
    delete from demo_product where id in
    <foreach collection="list" item="id" separator="," open="(" close=")">
      #{id}
    </foreach>
  </delete>


  <select id="getMaxId" resultType="java.math.BigInteger">
    select max(id)
    from demo_product
  </select>

  <select id="getById" parameterType="java.math.BigInteger" resultType="com.example.demo.model.entity.demo.ProductTest">
    select *
    from demo_product
    where id = #{id,jdbcType=BIGINT}
  </select>

<!--  <select id="getByIds" parameterType="java.math.BigInteger" resultType="com.example.demo.model.entity.demo.ProductTest">-->

  <select id="getByIds" parameterType="java.util.List" resultType="com.example.demo.model.entity.demo.ProductTest">
    select *
    from demo_product
    where id in
    <foreach collection="list" item="id" separator="," open="(" close=")">
      #{id,jdbcType=BIGINT}
    </foreach>
  </select>

</mapper>