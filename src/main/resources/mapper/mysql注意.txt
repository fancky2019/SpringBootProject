

  单个值判空
  <if test="filmCode != null and filmCode != ''">
  1、时间比较 大于等于 小于等于 要转义 <![CDATA[ 转义字符 ]]>
     /*mysql  时间 大于等于  and co.pay_time <![CDATA[ >= ]]> #{startTime,jdbcType=DATE}*/
         <!-- 小于等于    <![CDATA[ <= ]]>-->

   2、like
        and m.FormName LIKE CONCAT('%',#{formname,jdbcType=VARCHAR},'%')

   3、集合
       /* 如果collection是对象的一个属性直接用属性名称。如:userIds */
        <foreach collection="list" index="index" item="item" separator="," open="(" close=")">
            #{item}
        </foreach>
        集合判空
		<if test="deptDataPermissionIds != null and deptDataPermissionIds.size() > 0 ">
					AND co1.dept_data_permission_id IN
					<foreach collection="deptDataPermissionIds" index="index" item="deptDataPermissionId" open="(" separator="," close=")">
						#{deptDataPermissionId}
					</foreach>
		</if>

    <trim> 标签属性说明：
    prefix：在trim标签内的内容之前添加一个前缀。在上述例子中，当没有任何条件满足时，WHERE会被添加到SQL语句中。
    prefixOverrides：指定要覆盖的前缀。在这个例子中，如果第一个条件就是AND或OR，它会被覆盖掉。这对于避免在第一个条件前就添加了AND或OR关键字非常有用。
    suffix：在trim标签内的内容之后添加一个后缀。
    suffixOverrides：指定要覆盖的后缀。这在某些情况下很有用，比如你想要在所有条件后面自动添加一个逗号，但又不想在最后一个条件后面添加逗号。








   4、 if  else
   <choose>
       <when test="tableCStatisticsStartDate!=null">
      /* C表*/
       create_at between #{tableCStatisticsStartDate,jdbcType=DATE} and DATE_ADD(#{tableCStatisticsEndDate,jdbcType=DATE},INTERVAL 1 DAY)
       </when>
       <otherwise>
       create_at between #{startDate,jdbcType=DATE} and DATE_ADD(#{startDate,jdbcType=DATE},INTERVAL 1 DAY)
       </otherwise>
    </choose>

    5、    <insert id="insert" keyProperty="id" useGeneratedKeys="true"> 插入数据后生成的自增id自动添加到model的id属性中.

    6、   一级缓存：要开启事务，在同一事务内两次查询利用缓存。实际没多大用
          二级缓存 <select id="getPageData" useCache="true" resultType="com.example.demo.model.viewModel.ProductVM" >
          resultType 要实现Serializable接口，可序列化。
    7、resultType
    select返回类型，select指定parameterType和resultType，返回List<T>,指定resultType=T
    单一数据 ,数值类型,字符类型(字符串) ,布尔类型等等j如ava.lang.Integer。
    返回一个对象(pojo ,vo等)
    返回一个集合(类型都是List 集合)


    //参数为List<T> 指定parameterType="java.util.List" 或者pojo 都可以
    insert ,delete update 返回的都是数值类型 ,xml中没有resultType属性
    insert 插入成功后 返回成功的数目 ,否则为-1
    delete 删除成功后 返回成功的数目 ,否则为-1
    update 删更改成功后 返回成功的数目 ,否则为-1

