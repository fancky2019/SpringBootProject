<?xml version="1.0" encoding="UTF-8"?>
<!--日志级别以及优先级排序: OFF > FATAL > ERROR > WARN > INFO > DEBUG > TRACE > ALL -->
<!--        Appenders 定义日志输出的目的地。-->
<!--        PatternLayout 定义日志的输出格式。-->
<!--        Policies 用于定义滚动文件的触发策略：-->
<!--        Loggers 定义日志记录器的行为：  Root：根 Logger，所有日志记录器都会继承它的配置。-->
<configuration status="WARN" monitorInterval="30">
    <Properties>
        <Property name="springAppName">spring-boot-project</Property>
        <!--自定义一些常量，之后使用${变量名}引用-->
        <Property name="logFilePath">log</Property>
        <Property name="logFileName">test.log</Property>
<!--        "[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%p] - %m%n"-->
<!--        <property name="log_pattern">%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] [%X{traceId}] %-5level %c{36} - %m%n</property>-->
        <property name="log_pattern">%d{yyyy-MM-dd HH:mm:ss.SSS} [%t] [${springAppName},%X{traceId},%X{spanId}] %-5level %c{36} - %m%n</property>

        <!--        按照springBoot 默认格式 + 添加颜色-->
        <!--        1、添加虚拟机配置 -Dlog4j.skipJansi=false-->
        <!--        2、yml 添加配置 -->
        <!--        spring:-->
        <!--        output:-->
        <!--        ansi:-->
        <!--        enabled: always-->
        <!--        3、控制台appender添加配置 CONSOLE_LOG_PATTERN-->
        <property name="CONSOLE_LOG_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} %highlight{%6p} %style{%5pid}{bright,magenta} --- [%15.15t] %style{%-40.40logger{39}}{bright,cyan}: %m%n"/>



    </Properties>

    <appenders>
        <!--append="false" :根据其下日志策略,每次清空文件重新输入日志,可用于测试-->
        <!--        <File name="log" fileName="${logFilePath}/${logFileName}" append="false">-->
        <!--            <PatternLayout pattern="%d{HH:mm:ss.SSS} %-5level %class{36} %L %M - %msg%xEx%n"/>-->
        <!--        </File>-->


        <!-- ${sys:user.home} : 默认项目路径   root /root   普通用户  /home-->

         <!--1. 设置SMTPAppender属性-->
        <!--          to  收件人，多个逗号隔开，from发件人-->
        <!--        smtpPassword:设置QQ邮件客户端时候的授权码-->
        <smtp name="Mail" subject="Error Log" to="709737588@qq.com,517312606@qq.com" from="1513918351@qq.com"
              replyTo="1513918351@qq.com" smtpHost="smtp.qq.com" smtpDebug="false" smtpProtocol="smtps"
              smtpUsername="1513918351@qq.com" smtpPassword="ifxoxskborkojeea" smtpPort="465" bufferSize="1024">
              <!--定义error级别日志才发-->
            <ThresholdFilter level="error" onMatch="ACCEPT" onMismatch="DENY"/>
		</smtp>


        <console name="Console" target="SYSTEM_OUT">
           <PatternLayout pattern="${log_pattern}"/>
        </console>
        <!--        linux指定文件文职-->
        <!--        <RollingFile name="RollingFile" fileName="var/log/ordermigratedbtool/${date:yyyy-MM}/${date:yyyy-MM-dd}/log.log"-->
        <!--                     filePattern="var/log/ordermigratedbtool/$${date:yyyy-MM}/$${date:yyyy-MM-dd}/info-%d{yyyy-MM-dd}-%i.log">-->

<!--        interval（时间间隔）-->
<!--        指定日志滚动的时间间隔，单位与 filePattern 中的日期格式一致。例如：-->
<!--        filePattern="logs/app-%d{yyyy-MM-dd-HH}.log.gz"（按小时滚动）-->
<!--        interval="1" 表示每 1 小时滚动一次。-->
<!--        如果 filePattern 使用的是 yyyy-MM-dd（按天滚动），interval="1" 则表示每天滚动一次。-->
<!--        modulate（对齐时间）-->
<!--        modulate="true" 使日志文件滚动时间点与自然时间对齐。例如：-->
<!--        filePattern="logs/app-%d{yyyy-MM-dd-HH}.log.gz" 且 interval="1"，则日志会在每小时的整点（如 12:00, 13:00）进行滚动。-->
<!--        如果 modulate="false"，则从应用启动时间开始计算，例如应用在 12:15 启动，每小时滚动一次，则下次滚动时间是 13:15。-->
        <RollingFile name="RollingFile" fileName="logs/${date:yyyy-MM}/${date:yyyy-MM-dd}/log.log"
                     filePattern="logs/$${date:yyyy-MM}/$${date:yyyy-MM-dd}/info-%d{yyyy-MM-dd}-%i.log">
            <ThresholdFilter level="DEBUG" onMatch="ACCEPT" onMismatch="DENY"/>
            <PatternLayout pattern="${log_pattern}"/>
            <Policies>
<!--                filePattern %d{yyyy-MM-dd-HH} %d{yyyy-MM-dd-HH}  interval 分别标识 小时 和天 间隔-->
                <!-- 基于时间的滚动策略，interval="1" 表示每 1 滚动一次，modulate="true" 表示从 0 点开始计算。  -->
                <TimeBasedTriggeringPolicy interval="1" modulate="true"/>
                <!-- 基于文件大小的滚动策略，当文件大小超过 1024MB 时也会滚动。文件大小超过 100MB 时也滚动 -->
                <SizeBasedTriggeringPolicy size="1024 MB"/>
            </Policies>
            <!--定义文件保留策略， 最多保留 30 个文件 -->
            <DefaultRolloverStrategy max="30"/>
        </RollingFile>

        <Async name="AsyncMail">
            <appender-ref ref="Mail"/>
        </Async>
    </appenders>

    <loggers>
<!--        过滤框架的debug-->
        <logger name="org.springframework" level="INFO"/>
        <logger name="org.mybatis" level="INFO"/>
        <logger name="org.thymeleaf" level="INFO"/>
        <logger name="org.redisson" level="INFO"/>
        <logger name="com.zaxxer.hikari" level="INFO"/>
        <logger name="io.lettuce.core" level="INFO"/>
        <logger name="org.apache" level="INFO"/>
        <logger name="io.netty.channel.nio" level="INFO"/>
        <logger name="org.camunda.bpm.engine" level="INFO"/>
        <logger name="springfox" level="INFO"/>

        <!--        异步-->
        <AsyncRoot level="all">
            <appender-ref ref="Console"/>
            <appender-ref ref="RollingFile"/>
<!--            <appender-ref ref="Mail"/>-->
        </AsyncRoot>

        <!--        同步-->
<!--        <Root level="all">-->
        <!--            <appender-ref ref="Console"/>-->
        <!--            <appender-ref ref="RollingFile"/>-->
        <!--            <appender-ref ref="AsyncMail"/>-->
        <!--        </Root>-->


<!--        <AsyncLogger name="AsyncLogger" level="trace" includeLocation="true" additivity="false">-->
<!--            <appender-ref ref="RollingFile"/>-->
<!--             <appender-ref ref="Mail"/>-->
<!--        </AsyncLogger>-->
    </loggers>
</configuration>