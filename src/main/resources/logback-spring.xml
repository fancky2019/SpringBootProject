<?xml version="1.0" encoding="UTF-8"?>
<!--
 Logback配置文件。

logback.xml加载顺序：
logback.xml—>application.properties—>logback-spring.xml -> application.yml(偶尔)

 日志级别从低到高分为TRACE < DEBUG < INFO < WARN < ERROR < FATAL，如果设置为WARN，则低于WARN的信息都不会输出
 scan:当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true
 scanPeriod:设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。
 debug:当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。
-->
<configuration scan="false" scanPeriod="3600 seconds" debug="false">
	<!-- 彩色日志 -->
	<!--	在spring boot下可以通过引用org/springframework/boot/logging/logback/defaults.xml文件中，配置的默认控制台日志输出模板CONSOLE_LOG_PATTERN。-->
	<!--	里面默认采用的就是彩色日志输出。-->
	<!-- 引入spirng boot默认的logback配置文件 -->
<!--	<include resource="org/springframework/boot/logging/logback/defaults.xml"/>-->

	<!-- logger上下文,LOG_PATH是spring boot内置变量,取值logging.path -->
	<property name="APP_NAME" value="app"/>
	<contextName>${APP_NAME}</contextName>
	<property name="LOG_HOME" value="logs/${APP_NAME}"/>

	<springProperty scope="context" name="APPLICATION_NAME" source="spring.application.name"/>
	<springProperty scope="context" name="logging.path" source="logging.file.path" defaultValue="logs/"/>
	<property name="PATTERN" value="%d{yyyy-MM-dd HH:mm:ss} -[%thread] - [%X{traceId}] -[%-5level]- [%logger{20}] - %msg%n" />


<!--	 控制台颜色-->
	<conversionRule conversionWord="clr" converterClass="org.springframework.boot.logging.logback.ColorConverter" />
	<conversionRule conversionWord="wex" converterClass="org.springframework.boot.logging.logback.WhitespaceThrowableProxyConverter" />
	<conversionRule conversionWord="wEx" converterClass="org.springframework.boot.logging.logback.ExtendedWhitespaceThrowableProxyConverter" />
<!--	在默认logback 中添加traceid-->
	<property name="CONSOLE_LOG_PATTERN" value="${CONSOLE_LOG_PATTERN:-%clr(%d{${LOG_DATEFORMAT_PATTERN:-yyyy-MM-dd HH:mm:ss.SSS}}){faint} - %clr(${LOG_LEVEL_PATTERN:-%5p}) %clr(${PID:- }){magenta} %clr(---){faint} %clr([%15.15t]){faint} - [%X{traceId}] %clr(%-40.40logger{39}){cyan} %clr(:){faint} %m%n${LOG_EXCEPTION_CONVERSION_WORD:-%wEx}}"/>
	<!-- <contextName>${APPLICATION_NAME}Log</contextName> -->
	


	<!-- [1,公共Appender] 控制台STDOUT -->
    <appender name="STDOUT-APPENDER" class="ch.qos.logback.core.ConsoleAppender">
        <param name="target" value="System.out"/>
        <encoder charset="UTF-8">
			<!-- 采用Spring boot中默认的控制台彩色日志输出模板 -->
			<pattern>${CONSOLE_LOG_PATTERN}</pattern>
        </encoder>
    </appender>
	
	<!-- [2,公共Appender] 默认 -->
	<appender name="FILE-APPENDER" class="ch.qos.logback.core.rolling.RollingFileAppender">
		<file>${logging.path}/log.log</file>
		<append>true</append>
		<!-- 日志记录器的滚动策略，按日期，按大小记录 -->
		<rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
			<!-- 日志文件输出的文件名 -->
			<FileNamePattern>${logging.path}/default/log.%d{yyyyMMdd}.%i.log</FileNamePattern>
<!--			<FileNamePattern>${logging.path}/default/%d{yyyyMMdd}.%i.log</FileNamePattern>-->
			<timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
				<maxFileSize>1024MB</maxFileSize>
			</timeBasedFileNamingAndTriggeringPolicy>
			<!--日志文件保留天数-->
			<maxHistory>30</maxHistory>
		</rollingPolicy>

		<encoder charset="UTF-8">
			<pattern>${PATTERN}</pattern>
		</encoder>
	</appender>

	<!-- 异步日志记录器定义 -->
	<appender name="ASYNC" class="ch.qos.logback.classic.AsyncAppender">
		<!-- 不丢失日志.默认的,如果队列的80%已满,则会丢弃TRACT、DEBUG、INFO级别的日志 -->
		<discardingThreshold>0</discardingThreshold>
		<!-- 更改默认的队列的深度,该值会影响性能.默认值为256 -->
		<queueSize>256</queueSize>
		<!-- 添加附加的appender,最多只能添加一个 -->
		<appender-ref ref="FILE-APPENDER" />
	</appender>

<!--	设置组件日志级别-->
	<logger name="io.swagger.models.parameters.AbstractSerializableParameter" level="ERROR" />

	<!-- Root logger  -->
	<root>
		<level value="DEBUG"/>
		<appender-ref ref="STDOUT-APPENDER"/>
		<appender-ref ref="FILE-APPENDER"/>
<!--		异步写日志-->
<!--		<appender-ref ref="ASYNC"/>-->
	</root>

	<!-- dev -->
	<springProfile name="dev">
		<root>
			<level value="DEBUG"/>
			<appender-ref ref="STDOUT-APPENDER"/>
			<appender-ref ref="FILE-APPENDER"/>
		</root>
	</springProfile>

	<!-- sit -->
	<springProfile name="sit">
		<root>
			<level value="INFO"/>
			<appender-ref ref="STDOUT-APPENDER"/>
			<appender-ref ref="FILE-APPENDER"/>
		</root>
	</springProfile>

	<!-- test -->
	<springProfile name="test">
		<root>
			<level value="INFO"/>
			<appender-ref ref="STDOUT-APPENDER"/>
			<appender-ref ref="FILE-APPENDER"/>
		</root>
	</springProfile>

	<!-- prod -->
	<springProfile name="crm_prod">
		<root>
			<level value="INFO"/>
			<appender-ref ref="STDOUT-APPENDER"/>
			<appender-ref ref="FILE-APPENDER"/>
		</root>
	</springProfile>

	<!-- prod -->
	<springProfile name="crm_pre">
		<root>
			<level value="INFO"/>
			<appender-ref ref="STDOUT-APPENDER"/>
			<appender-ref ref="FILE-APPENDER"/>
		</root>
	</springProfile>
	
	<jmxConfigurator/>
</configuration>
